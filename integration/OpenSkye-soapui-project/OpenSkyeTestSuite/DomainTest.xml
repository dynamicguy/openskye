<?xml version="1.0" encoding="UTF-8"?>
<con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="DomainTest" searchProperties="true" id="b3c1c874-5193-4e69-a8bb-3313b9835cd2" xmlns:con="http://eviware.com/soapui/config"><con:settings/><con:testStep type="restrequest" name="GetAllDomains"><con:settings/><con:config service="REST API" resourcePath="/api/${#Project#version}/domains" methodName="GetAllDomains" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GetAllDomains" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="x-api-key" value="${#Project#userApiKey}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://${#Project#apiAddress}:5000</con:endpoint><con:request/><con:assertion type="XPath Match" name="Check for existance of [page]"><con:configuration><path>declare namespace ns1='http://${#Project#apiAddress}/api/${#Project#version}/domains';
exists( //ns1:Response/ns1:page)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [pageSize]"><con:configuration><path>declare namespace ns1='http://${#Project#apiAddress}/api/${#Project#version}/domains';
exists( //ns1:Response/ns1:pageSize)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [totalResults]"><con:configuration><path>declare namespace ns1='http://${#Project#apiAddress}/api/${#Project#version}/domains';
exists( //ns1:Response/ns1:totalResults)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [results]"><con:configuration><path>declare namespace ns1='http://${#Project#apiAddress}/api/${#Project#version}/domains';
exists( //ns1:Response/ns1:results)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [id]"><con:configuration><path>declare namespace ns1='http://${#Project#apiAddress}/api/${#Project#version}/domains';
exists( //ns1:Response/ns1:results/ns1:e/ns1:id)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [name]"><con:configuration><path>declare namespace ns1='http://${#Project#apiAddress}/api/${#Project#version}/domains';
exists( //ns1:Response/ns1:results/ns1:e/ns1:name)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="SaveSkyeDomain"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>SkyeDomain</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>GetAllDomains</con:sourceStep><con:sourcePath>declare namespace ns1='http://${#Project#apiAddress}/api/${#Project#version}/domains';
//ns1:Response[1]/ns1:results[1]/ns1:e[1]/ns1:id[1]</con:sourcePath><con:targetType>skyeDomain</con:targetType><con:targetStep>#Project#</con:targetStep></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>SkyeDomainName</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>GetAllDomains</con:sourceStep><con:sourcePath>declare namespace ns1='http://${#Project#apiAddress}/api/${#Project#version}/domains';
//ns1:Response[1]/ns1:results[1]/ns1:e[1]/ns1:name[1]</con:sourcePath><con:targetType>skyeDomainName</con:targetType><con:targetStep>#Project#</con:targetStep></con:transfers></con:config></con:testStep><con:testStep type="restrequest" name="GetSkyeDomain"><con:settings/><con:config service="REST API" resourcePath="/api/${#Project#version}/domains/${#Project#skyeDomain}" methodName="GetSkyeDomain" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GetSkyeDomain" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="x-api-key" value="${#Project#userApiKey}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://${#Project#apiAddress}:5000</con:endpoint><con:request/><con:assertion type="XPath Match" name="Check for existance of [id]"><con:configuration><path>declare namespace ns1='http://${#Project#apiAddress}/api/${#Project#version}/domains/${#Project#skyeDomain}';
exists( //ns1:Response/ns1:id)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [name]"><con:configuration><path>declare namespace ns1='http://${#Project#apiAddress}/api/${#Project#version}/domains/${#Project#skyeDomain}';
exists( //ns1:Response/ns1:name)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [id]"><con:configuration><path>declare namespace ns1='http://${#Project#apiAddress}/api/${#Project#version}/domains/${#Project#skyeDomain}';
//ns1:Response[1]/ns1:id[1]/text()</path><content>${#Project#skyeDomain}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [name]"><con:configuration><path>declare namespace ns1='http://${#Project#apiAddress}/api/${#Project#version}/domains/${#Project#skyeDomain}';
//ns1:Response[1]/ns1:name[1]/text()</path><content>${#Project#skyeDomainName}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="CreateDomain"><con:settings/><con:config service="REST API" resourcePath="/api/${#Project#version}/domains" methodName="CreateDomain" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CreateDomain" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="x-api-key" value="${#Project#userApiKey}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://${#Project#apiAddress}:5000</con:endpoint><con:request>{
	"name": "${#Project#testDomainName}",
	"projects": {},
	"metadataTemplates": {}
}</con:request><con:assertion type="XPath Match" name="Check for existance of [id]"><con:configuration><path>declare namespace ns1='http://${#Project#apiAddress}/api/${#Project#version}/domains';
exists( //ns1:Response/ns1:id)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [name]"><con:configuration><path>declare namespace ns1='http://${#Project#apiAddress}/api/${#Project#version}/domains';
exists( //ns1:Response/ns1:name)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [name]"><con:configuration><path>declare namespace ns1='http://${#Project#apiAddress}/api/${#Project#version}/domains';
//ns1:Response[1]/ns1:name[1]/text()</path><content>${#Project#testDomainName}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="SaveDomainId"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>DomainId</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>CreateDomain</con:sourceStep><con:sourcePath>declare namespace ns1='http://${#Project#apiAddress}/api/${#Project#version}/domains';
//ns1:Response[1]/ns1:id[1]</con:sourcePath><con:targetType>testDomainId</con:targetType><con:targetStep>#Project#</con:targetStep></con:transfers></con:config></con:testStep><con:testStep type="restrequest" name="UpdateDomain" id="10ecde8c-fc0d-44f3-b6b1-b3055a642b38"><con:settings/><con:config service="REST API" resourcePath="/api/${#Project#version}/domains/${#Project#testDomainId}" methodName="UpdateDomain" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="UpdateDomain" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="x-api-key" value="${#Project#userApiKey}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://${#Project#apiAddress}:5000</con:endpoint><con:request>{
	"id": "${#Project#testDomainId}",
	"name": "${#Project#testDomainNameUpdate}"
}</con:request><con:assertion type="XPath Match" name="Check for existance of [id]"><con:configuration><path>declare namespace ns1='http://${#Project#apiAddress}/api/${#Project#version}/domains/${#Project#testDomainId}';
exists( //ns1:Response/ns1:id)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [name]"><con:configuration><path>declare namespace ns1='http://${#Project#apiAddress}/api/${#Project#version}/domains/${#Project#testDomainId}';
exists( //ns1:Response/ns1:name)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [id]"><con:configuration><path>declare namespace ns1='http://${#Project#apiAddress}/api/${#Project#version}/domains/${#Project#testDomainId}';
//ns1:Response[1]/ns1:id[1]/text()</path><content>${#Project#testDomainId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [name]"><con:configuration><path>declare namespace ns1='http://${#Project#apiAddress}/api/${#Project#version}/domains/${#Project#testDomainId}';
//ns1:Response[1]/ns1:name[1]/text()</path><content>${#Project#testDomainNameUpdate}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="DeleteDomain"><con:settings/><con:config service="REST API" resourcePath="/api/${#Project#version}/domains/${#Project#testDomainId}" methodName="DeleteDomain" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DeleteDomain" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="x-api-key" value="${#Project#userApiKey}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://${#Project#apiAddress}:5000</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:properties/><con:reportParameters/><con:breakPoints><con:testStepId>10ecde8c-fc0d-44f3-b6b1-b3055a642b38</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase>