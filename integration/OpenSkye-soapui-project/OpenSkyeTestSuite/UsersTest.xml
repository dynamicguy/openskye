<?xml version="1.0" encoding="UTF-8"?>
<con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="UsersTest" searchProperties="true" id="f682f969-1839-435e-b7f2-da6b57ba6933" xmlns:con="http://eviware.com/soapui/config">
  <con:settings/>
  <con:testStep type="restrequest" name="GetAllUsers">
    <con:settings/>
    <con:config service="REST API" resourcePath="/api/${#Project#version}/users" methodName="GetAllUsers" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:restRequest name="GetAllUsers" mediaType="application/json">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="x-api-key" value="${#Project#userApiKey}" xmlns="http://eviware.com/soapui/config"/></con:setting>
        </con:settings>
        <con:endpoint>http://${#Project#apiAddress}:5000</con:endpoint>
        <con:request/>
        <con:assertion type="XPath Match" name="Check for existance of [page]">
          <con:configuration>
            <path>declare namespace ns1='http://${#Project#apiAddress}/api/${#Project#version}/users';
exists( //ns1:Response/ns1:page)</path>
            <content>true</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="XPath Match" name="Check for existance of [pageSize]">
          <con:configuration>
            <path>declare namespace ns1='http://${#Project#apiAddress}/api/${#Project#version}/users';
exists( //ns1:Response/ns1:pageSize)</path>
            <content>true</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="XPath Match" name="Check for existance of [results]">
          <con:configuration>
            <path>declare namespace ns1='http://${#Project#apiAddress}/api/${#Project#version}/users';
exists( //ns1:Response/ns1:results)</path>
            <content>true</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="XPath Match" name="Check for existance of [totalResults]">
          <con:configuration>
            <path>declare namespace ns1='http://${#Project#apiAddress}/api/${#Project#version}/users';
exists( //ns1:Response/ns1:totalResults)</path>
            <content>true</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:credentials>
          <con:authType>Global HTTP Settings</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:jmsPropertyConfig/>
        <con:parameters/>
      </con:restRequest>
    </con:config>
  </con:testStep>
  <con:testStep type="restrequest" name="GetAllPermissions">
    <con:settings/>
    <con:config service="REST API" resourcePath="/api/${#Project#version}/permissions" methodName="GetAllPermissions" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:restRequest name="GetAllPermissions" mediaType="application/json">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="x-api-key" value="${#Project#userApiKey}" xmlns="http://eviware.com/soapui/config"/></con:setting>
        </con:settings>
        <con:endpoint>http://${#Project#apiAddress}:5000</con:endpoint>
        <con:request/>
        <con:assertion type="XPath Match" name="Check for existance of [page]">
          <con:configuration>
            <path>declare namespace ns1='http://${#Project#apiAddress}/api/${#Project#version}/permissions';
exists( //ns1:Response/ns1:page)</path>
            <content>true</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="XPath Match" name="Check for existance of [pageSize]">
          <con:configuration>
            <path>declare namespace ns1='http://${#Project#apiAddress}/api/${#Project#version}/permissions';
exists( //ns1:Response/ns1:pageSize)</path>
            <content>true</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="XPath Match" name="Check for existance of [results]">
          <con:configuration>
            <path>declare namespace ns1='http://${#Project#apiAddress}/api/${#Project#version}/permissions';
exists( //ns1:Response/ns1:results)</path>
            <content>true</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="XPath Match" name="Check for existance of [id]">
          <con:configuration>
            <path>declare namespace ns1='http://${#Project#apiAddress}/api/${#Project#version}/permissions';
exists( //ns1:Response/ns1:results/ns1:e/ns1:id)</path>
            <content>true</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="XPath Match" name="Check for existance of [permission]">
          <con:configuration>
            <path>declare namespace ns1='http://${#Project#apiAddress}/api/${#Project#version}/permissions';
exists( //ns1:Response/ns1:results/ns1:e/ns1:permission)</path>
            <content>true</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="XPath Match" name="Check for existance of [totalResults]">
          <con:configuration>
            <path>declare namespace ns1='http://${#Project#apiAddress}/api/${#Project#version}/permissions';
exists( //ns1:Response/ns1:totalResults)</path>
            <content>true</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:credentials>
          <con:authType>Global HTTP Settings</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:jmsPropertyConfig/>
        <con:parameters/>
      </con:restRequest>
    </con:config>
  </con:testStep>
  <con:testStep type="restrequest" name="GetAllRolePermissions">
    <con:settings/>
    <con:config service="REST API" resourcePath="/api/${#Project#version}/rolePermissions" methodName="GetAllRolePermissions" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:restRequest name="GetAllRolePermissions" mediaType="application/json">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="x-api-key" value="${#Project#userApiKey}" xmlns="http://eviware.com/soapui/config"/></con:setting>
        </con:settings>
        <con:endpoint>http://${#Project#apiAddress}:5000</con:endpoint>
        <con:request/>
        <con:assertion type="XPath Match" name="Check for existance of [page]">
          <con:configuration>
            <path>declare namespace ns1='http://${#Project#apiAddress}/api/${#Project#version}/rolePermissions';
exists( //ns1:Response/ns1:page)</path>
            <content>true</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="XPath Match" name="Check for existance of [pageSize]">
          <con:configuration>
            <path>declare namespace ns1='http://${#Project#apiAddress}/api/${#Project#version}/rolePermissions';
exists( //ns1:Response/ns1:pageSize)</path>
            <content>true</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="XPath Match" name="Check for existance of [results]">
          <con:configuration>
            <path>declare namespace ns1='http://${#Project#apiAddress}/api/${#Project#version}/rolePermissions';
exists( //ns1:Response/ns1:results)</path>
            <content>true</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="XPath Match" name="Check for existance of [id]">
          <con:configuration>
            <path>declare namespace ns1='http://${#Project#apiAddress}/api/${#Project#version}/rolePermissions';
exists( //ns1:Response/ns1:results/ns1:e/ns1:id)</path>
            <content>true</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="XPath Match" name="Check for existance of [permission]">
          <con:configuration>
            <path>declare namespace ns1='http://${#Project#apiAddress}/api/${#Project#version}/rolePermissions';
exists( //ns1:Response/ns1:results/ns1:e/ns1:permission)</path>
            <content>true</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="XPath Match" name="Check for existance of [permission.id]">
          <con:configuration>
            <path>declare namespace ns1='http://${#Project#apiAddress}/api/${#Project#version}/rolePermissions';
exists( //ns1:Response/ns1:results/ns1:e/ns1:permission/ns1:id)</path>
            <content>true</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="XPath Match" name="Check for existance of [permission.permission]">
          <con:configuration>
            <path>declare namespace ns1='http://${#Project#apiAddress}/api/${#Project#version}/rolePermissions';
exists( //ns1:Response/ns1:results/ns1:e/ns1:permission/ns1:permission)</path>
            <content>true</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="XPath Match" name="Check for existance of [role]">
          <con:configuration>
            <path>declare namespace ns1='http://${#Project#apiAddress}/api/${#Project#version}/rolePermissions';
exists( //ns1:Response/ns1:results/ns1:e/ns1:role)</path>
            <content>true</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="XPath Match" name="Check for existance of [role.id]">
          <con:configuration>
            <path>declare namespace ns1='http://${#Project#apiAddress}/api/${#Project#version}/rolePermissions';
exists( //ns1:Response/ns1:results/ns1:e/ns1:role/ns1:id)</path>
            <content>true</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="XPath Match" name="Check for existance of [role.name]">
          <con:configuration>
            <path>declare namespace ns1='http://${#Project#apiAddress}/api/${#Project#version}/rolePermissions';
exists( //ns1:Response/ns1:results/ns1:e/ns1:role/ns1:name)</path>
            <content>true</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="XPath Match" name="Check for existance of [totalResults]">
          <con:configuration>
            <path>declare namespace ns1='http://${#Project#apiAddress}/api/${#Project#version}/rolePermissions';
exists( //ns1:Response/ns1:totalResults)</path>
            <content>true</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:credentials>
          <con:authType>Global HTTP Settings</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:jmsPropertyConfig/>
        <con:parameters/>
      </con:restRequest>
    </con:config>
  </con:testStep>
  <con:testStep type="restrequest" name="GetCurrentUser">
    <con:settings/>
    <con:config service="REST API" resourcePath="/api/${#Project#version}/users/${#Project#userId}" methodName="GetCurrentUser" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:restRequest name="GetCurrentUser" mediaType="application/json">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="x-api-key" value="${#Project#userApiKey}" xmlns="http://eviware.com/soapui/config"/></con:setting>
        </con:settings>
        <con:endpoint>http://${#Project#apiAddress}:5000</con:endpoint>
        <con:request/>
        <con:assertion type="XPath Match" name="Check for existance of [domain]">
          <con:configuration>
            <path>declare namespace ns1='http://${#Project#apiAddress}/api/${#Project#version}/users/${#Project#userId}';
exists( //ns1:Response/ns1:domain)</path>
            <content>true</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="XPath Match" name="Check for existance of [domain.id]">
          <con:configuration>
            <path>declare namespace ns1='http://${#Project#apiAddress}/api/${#Project#version}/users/${#Project#userId}';
exists( //ns1:Response/ns1:domain/ns1:id)</path>
            <content>true</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="XPath Match" name="Check for existance of [domain.name]">
          <con:configuration>
            <path>declare namespace ns1='http://${#Project#apiAddress}/api/${#Project#version}/users/${#Project#userId}';
exists( //ns1:Response/ns1:domain/ns1:name)</path>
            <content>true</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="XPath Match" name="Check for existance of [email]">
          <con:configuration>
            <path>declare namespace ns1='http://${#Project#apiAddress}/api/${#Project#version}/users/${#Project#userId}';
exists( //ns1:Response/ns1:email)</path>
            <content>true</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="XPath Match" name="Check for existance of [id]">
          <con:configuration>
            <path>declare namespace ns1='http://${#Project#apiAddress}/api/${#Project#version}/users/${#Project#userId}';
exists( //ns1:Response/ns1:id)</path>
            <content>true</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="XPath Match" name="Check for existance of [name]">
          <con:configuration>
            <path>declare namespace ns1='http://${#Project#apiAddress}/api/${#Project#version}/users/${#Project#userId}';
exists( //ns1:Response/ns1:name)</path>
            <content>true</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:credentials>
          <con:authType>Global HTTP Settings</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:jmsPropertyConfig/>
        <con:parameters/>
      </con:restRequest>
    </con:config>
  </con:testStep>
  <con:testStep type="transfer" name="SaveUserDomain" id="21e6f437-1f8a-49f5-9316-c1605ce1ef83">
    <con:settings/>
    <con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
        <con:name>UserDomain</con:name>
        <con:sourceType>ResponseAsXml</con:sourceType>
        <con:sourceStep>GetCurrentUser</con:sourceStep>
        <con:sourcePath>declare namespace ns1='http://${#Project#apiAddress}/api/${#Project#version}/users/${#Project#userId}';
//ns1:Response[1]/ns1:domain[1]/ns1:id[1]</con:sourcePath>
        <con:targetType>userDomain</con:targetType>
        <con:targetStep>#Project#</con:targetStep>
      </con:transfers>
      <con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" transferToAll="false" entitize="false" ignoreEmpty="false" useXQuery="false" transferChildNodes="false">
        <con:name>UserDomainName</con:name>
        <con:sourceType>ResponseAsXml</con:sourceType>
        <con:sourceStep>GetCurrentUser</con:sourceStep>
        <con:sourcePath>declare namespace ns1='http://${#Project#apiAddress}/api/${#Project#version}/users/${#Project#userId}';
//ns1:Response[1]/ns1:domain[1]/ns1:name[1]</con:sourcePath>
        <con:targetType>userDomainName</con:targetType>
        <con:targetStep>#Project#</con:targetStep>
      </con:transfers>
    </con:config>
  </con:testStep>
  <con:testStep type="restrequest" name="GetAllRoles">
    <con:settings/>
    <con:config service="REST API" resourcePath="/api/${#Project#version}/roles" methodName="GetAllRoles" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:restRequest name="GetAllRoles" mediaType="application/json">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="x-api-key" value="${#Project#userApiKey}" xmlns="http://eviware.com/soapui/config"/></con:setting>
        </con:settings>
        <con:endpoint>http://${#Project#apiAddress}:5000</con:endpoint>
        <con:request/>
        <con:assertion type="XPath Match" name="Check for existance of [page]">
          <con:configuration>
            <path>declare namespace ns1='http://${#Project#apiAddress}/api/${#Project#version}/roles';
exists( //ns1:Response/ns1:page)</path>
            <content>true</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="XPath Match" name="Check for existance of [pageSize]">
          <con:configuration>
            <path>declare namespace ns1='http://${#Project#apiAddress}/api/${#Project#version}/roles';
exists( //ns1:Response/ns1:pageSize)</path>
            <content>true</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="XPath Match" name="Check for existance of [id]">
          <con:configuration>
            <path>declare namespace ns1='http://${#Project#apiAddress}/api/${#Project#version}/roles';
exists( //ns1:Response/ns1:results/ns1:e/ns1:id)</path>
            <content>true</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="XPath Match" name="Check for existance of [name]">
          <con:configuration>
            <path>declare namespace ns1='http://${#Project#apiAddress}/api/${#Project#version}/roles';
exists( //ns1:Response/ns1:results/ns1:e/ns1:name)</path>
            <content>true</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="XPath Match" name="Check for existance of [totalResults]">
          <con:configuration>
            <path>declare namespace ns1='http://${#Project#apiAddress}/api/${#Project#version}/roles';
exists( //ns1:Response/ns1:totalResults)</path>
            <content>true</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:credentials>
          <con:authType>Global HTTP Settings</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:jmsPropertyConfig/>
        <con:parameters/>
      </con:restRequest>
    </con:config>
  </con:testStep>
  <con:testStep type="transfer" name="SaveAdminRoleId">
    <con:settings/>
    <con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
        <con:name>AdminRoleId</con:name>
        <con:sourceType>ResponseAsXml</con:sourceType>
        <con:sourceStep>GetAllRoles</con:sourceStep>
        <con:sourcePath>declare namespace ns1='http://${#Project#apiAddress}/api/${#Project#version}/roles';
//ns1:Response[1]/ns1:results[1]/ns1:e[1]/ns1:id[1]</con:sourcePath>
        <con:targetType>adminRoleId</con:targetType>
        <con:targetStep>#Project#</con:targetStep>
      </con:transfers>
    </con:config>
  </con:testStep>
  <con:testStep type="restrequest" name="GetAdminRolePermissions">
    <con:settings/>
    <con:config service="REST API" resourcePath="/api/${#Project#version}/roles/${#Project#adminRoleId}/permissions" methodName="GetAdminRolePermisssions" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:restRequest name="GetAdminRolePermissions" mediaType="application/json">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="x-api-key" value="${#Project#userApiKey}" xmlns="http://eviware.com/soapui/config"/></con:setting>
        </con:settings>
        <con:endpoint>http://${#Project#apiAddress}:5000</con:endpoint>
        <con:request/>
        <con:assertion type="XPath Match" name="Check for existance of [page]">
          <con:configuration>
            <path>declare namespace ns1='http://${#Project#apiAddress}/api/${#Project#version}/roles/${#Project#adminRoleId}/permissions';
exists( //ns1:Response/ns1:page)</path>
            <content>true</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="XPath Match" name="Check for existance of [pageSize]">
          <con:configuration>
            <path>declare namespace ns1='http://${#Project#apiAddress}/api/${#Project#version}/roles/${#Project#adminRoleId}/permissions';
exists( //ns1:Response/ns1:pageSize)</path>
            <content>true</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="XPath Match" name="Check for existance of [results]">
          <con:configuration>
            <path>declare namespace ns1='http://${#Project#apiAddress}/api/${#Project#version}/roles/${#Project#adminRoleId}/permissions';
exists( //ns1:Response/ns1:results)</path>
            <content>true</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="XPath Match" name="Check for existance of [id]">
          <con:configuration>
            <path>declare namespace ns1='http://${#Project#apiAddress}/api/${#Project#version}/roles/${#Project#adminRoleId}/permissions';
exists( //ns1:Response/ns1:results/ns1:e/ns1:id)</path>
            <content>true</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="XPath Match" name="Check for existance of [permission]">
          <con:configuration>
            <path>declare namespace ns1='http://${#Project#apiAddress}/api/${#Project#version}/roles/${#Project#adminRoleId}/permissions';
exists( //ns1:Response/ns1:results/ns1:e/ns1:permission)</path>
            <content>true</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="XPath Match" name="Check for existance of [totalResults]">
          <con:configuration>
            <path>declare namespace ns1='http://${#Project#apiAddress}/api/${#Project#version}/roles/${#Project#adminRoleId}/permissions';
exists( //ns1:Response/ns1:totalResults)</path>
            <content>true</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:credentials>
          <con:authType>Global HTTP Settings</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:jmsPropertyConfig/>
        <con:parameters/>
      </con:restRequest>
    </con:config>
  </con:testStep>
  <con:testStep type="restrequest" name="CreateRole">
    <con:settings/>
    <con:config service="REST API" resourcePath="/api/${#Project#version}/roles" methodName="CreateRole" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:restRequest name="CreateRole" mediaType="application/json" postQueryString="false">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="x-api-key" value="${#Project#userApiKey}" xmlns="http://eviware.com/soapui/config"/></con:setting>
        </con:settings>
        <con:endpoint>http://${#Project#apiAddress}:5000</con:endpoint>
        <con:request>{
	"name": "${#Project#newUserRoleName}"
}</con:request>
        <con:assertion type="XPath Match" name="Check for existance of [id]">
          <con:configuration>
            <path>declare namespace ns1='http://${#Project#apiAddress}/api/${#Project#version}/roles';
exists( //ns1:Response/ns1:id)</path>
            <content>true</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="XPath Match" name="Check for existance of [name]">
          <con:configuration>
            <path>declare namespace ns1='http://${#Project#apiAddress}/api/${#Project#version}/roles';
exists( //ns1:Response/ns1:name)</path>
            <content>true</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="XPath Match" name="Match content of [name]">
          <con:configuration>
            <path>declare namespace ns1='http://${#Project#apiAddress}/api/${#Project#version}/roles';
//ns1:Response[1]/ns1:name[1]/text()</path>
            <content>${#Project#newUserRoleName}</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:credentials>
          <con:authType>Global HTTP Settings</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:jmsPropertyConfig/>
        <con:parameters/>
      </con:restRequest>
    </con:config>
  </con:testStep>
  <con:testStep type="transfer" name="SaveRoleId">
    <con:settings/>
    <con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
        <con:name>RoleId</con:name>
        <con:sourceType>ResponseAsXml</con:sourceType>
        <con:sourceStep>CreateRole</con:sourceStep>
        <con:sourcePath>declare namespace ns1='http://localhost/api/1/roles';
//ns1:Response[1]/ns1:id[1]</con:sourcePath>
        <con:targetType>newRoleId</con:targetType>
        <con:targetStep>#Project#</con:targetStep>
      </con:transfers>
    </con:config>
  </con:testStep>
  <con:testStep type="restrequest" name="GetRole">
    <con:settings/>
    <con:config service="REST API" resourcePath="/api/${#Project#version}/roles/${#Project#newRoleId}" methodName="GetRole" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:restRequest name="GetRole" mediaType="application/json">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="x-api-key" value="${#Project#userApiKey}" xmlns="http://eviware.com/soapui/config"/></con:setting>
        </con:settings>
        <con:endpoint>http://${#Project#apiAddress}:5000</con:endpoint>
        <con:request/>
        <con:assertion type="XPath Match" name="Check for existance of [id]">
          <con:configuration>
            <path>declare namespace ns1='http://${#Project#apiAddress}/api/${#Project#version}/roles/${#Project#newRoleId}';
exists( //ns1:Response/ns1:id)</path>
            <content>true</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="XPath Match" name="Check for existance of [name]">
          <con:configuration>
            <path>declare namespace ns1='http://${#Project#apiAddress}/api/${#Project#version}/roles/${#Project#newRoleId}';
exists( //ns1:Response/ns1:name)</path>
            <content>true</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="XPath Match" name="Match content of [id]">
          <con:configuration>
            <path>declare namespace ns1='http://${#Project#apiAddress}/api/${#Project#version}/roles/${#Project#newRoleId}';
//ns1:Response[1]/ns1:id[1]/text()</path>
            <content>${#Project#newRoleId}</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="XPath Match" name="Match content of [name]">
          <con:configuration>
            <path>declare namespace ns1='http://${#Project#apiAddress}/api/${#Project#version}/roles/${#Project#newRoleId}';
//ns1:Response[1]/ns1:name[1]/text()</path>
            <content>${#Project#newUserRoleName}</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:credentials>
          <con:authType>Global HTTP Settings</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:jmsPropertyConfig/>
        <con:parameters/>
      </con:restRequest>
    </con:config>
  </con:testStep>
  <con:testStep type="restrequest" name="GetAllUserRoles">
    <con:settings/>
    <con:config service="REST API" resourcePath="/api/${#Project#version}/userRoles" methodName="GetAllUserRoles" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:restRequest name="GetAllUserRoles" mediaType="application/json">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="x-api-key" value="${#Project#userApiKey}" xmlns="http://eviware.com/soapui/config"/></con:setting>
        </con:settings>
        <con:endpoint>http://${#Project#apiAddress}:5000</con:endpoint>
        <con:request/>
        <con:assertion type="XPath Match" name="Check for existance of [page]">
          <con:configuration>
            <path>declare namespace ns1='http://${#Project#apiAddress}/api/${#Project#version}/userRoles';
exists( //ns1:Response/ns1:page)</path>
            <content>true</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="XPath Match" name="Check for existance of [pageSize]">
          <con:configuration>
            <path>declare namespace ns1='http://${#Project#apiAddress}/api/${#Project#version}/userRoles';
exists( //ns1:Response/ns1:pageSize)</path>
            <content>true</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="XPath Match" name="Check for existance of [results]">
          <con:configuration>
            <path>declare namespace ns1='http://${#Project#apiAddress}/api/${#Project#version}/userRoles';
exists( //ns1:Response/ns1:results)</path>
            <content>true</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="XPath Match" name="Check for existance of [id]">
          <con:configuration>
            <path>declare namespace ns1='http://${#Project#apiAddress}/api/${#Project#version}/userRoles';
exists( //ns1:Response/ns1:results/ns1:e/ns1:id)</path>
            <content>true</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="XPath Match" name="Check for existance of [role]">
          <con:configuration>
            <path>declare namespace ns1='http://${#Project#apiAddress}/api/${#Project#version}/userRoles';
exists( //ns1:Response/ns1:results/ns1:e/ns1:role)</path>
            <content>true</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="XPath Match" name="Check for existance of [role.id]">
          <con:configuration>
            <path>declare namespace ns1='http://${#Project#apiAddress}/api/${#Project#version}/userRoles';
exists( //ns1:Response/ns1:results/ns1:e/ns1:role/ns1:id)</path>
            <content>true</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="XPath Match" name="Check for existance of [role.name]">
          <con:configuration>
            <path>declare namespace ns1='http://${#Project#apiAddress}/api/${#Project#version}/userRoles';
exists( //ns1:Response/ns1:results/ns1:e/ns1:role/ns1:name)</path>
            <content>true</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="XPath Match" name="Check for existance of [user]">
          <con:configuration>
            <path>declare namespace ns1='http://${#Project#apiAddress}/api/${#Project#version}/userRoles';
exists( //ns1:Response/ns1:results/ns1:e/ns1:user)</path>
            <content>true</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="XPath Match" name="Check for existance of [user.domain]">
          <con:configuration>
            <path>declare namespace ns1='http://${#Project#apiAddress}/api/${#Project#version}/userRoles';
exists( //ns1:Response/ns1:results/ns1:e/ns1:user/ns1:domain)</path>
            <content>true</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="XPath Match" name="Check for existance of [user.domain.id]">
          <con:configuration>
            <path>declare namespace ns1='http://${#Project#apiAddress}/api/${#Project#version}/userRoles';
exists( //ns1:Response/ns1:results/ns1:e/ns1:user/ns1:domain/ns1:id)</path>
            <content>true</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="XPath Match" name="Check for existance of [user.domain.name]">
          <con:configuration>
            <path>declare namespace ns1='http://${#Project#apiAddress}/api/${#Project#version}/userRoles';
exists( //ns1:Response/ns1:results/ns1:e/ns1:user/ns1:domain/ns1:name)</path>
            <content>true</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="XPath Match" name="Check for existance of [user.email]">
          <con:configuration>
            <path>declare namespace ns1='http://${#Project#apiAddress}/api/${#Project#version}/userRoles';
exists( //ns1:Response/ns1:results/ns1:e/ns1:user/ns1:email)</path>
            <content>true</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="XPath Match" name="Check for existance of [user.id]">
          <con:configuration>
            <path>declare namespace ns1='http://${#Project#apiAddress}/api/${#Project#version}/userRoles';
exists( //ns1:Response/ns1:results/ns1:e/ns1:user/ns1:id)</path>
            <content>true</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="XPath Match" name="Check for existance of [user.name]">
          <con:configuration>
            <path>declare namespace ns1='http://${#Project#apiAddress}/api/${#Project#version}/userRoles';
exists( //ns1:Response/ns1:results/ns1:e/ns1:user/ns1:name)</path>
            <content>true</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="XPath Match" name="Check for existance of [totalResults]">
          <con:configuration>
            <path>declare namespace ns1='http://${#Project#apiAddress}/api/${#Project#version}/userRoles';
exists( //ns1:Response/ns1:totalResults)</path>
            <content>true</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="XPath Match" name="Match content of [user.domain.id]">
          <con:configuration>
            <path>declare namespace ns1='http://${#Project#apiAddress}/api/${#Project#version}/userRoles';
//ns1:Response[1]/ns1:results[1]/ns1:e[1]/ns1:user[1]/ns1:domain[1]/ns1:id[1]/text()</path>
            <content>${#Project#userDomain}</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="XPath Match" name="Match content of [user.domain.name]">
          <con:configuration>
            <path>declare namespace ns1='http://${#Project#apiAddress}/api/${#Project#version}/userRoles';
//ns1:Response[1]/ns1:results[1]/ns1:e[1]/ns1:user[1]/ns1:domain[1]/ns1:name[1]/text()</path>
            <content>${#Project#userDomainName}</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="XPath Match" name="Match content of [user.email]">
          <con:configuration>
            <path>declare namespace ns1='http://${#Project#apiAddress}/api/${#Project#version}/userRoles';
//ns1:Response[1]/ns1:results[1]/ns1:e[1]/ns1:user[1]/ns1:email[1]/text()</path>
            <content>${#Project#userEmail}</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="XPath Match" name="Match content of [user.id]">
          <con:configuration>
            <path>declare namespace ns1='http://${#Project#apiAddress}/api/${#Project#version}/userRoles';
//ns1:Response[1]/ns1:results[1]/ns1:e[1]/ns1:user[1]/ns1:id[1]/text()</path>
            <content>${#Project#userId}</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="XPath Match" name="Match content of [user.name]">
          <con:configuration>
            <path>declare namespace ns1='http://${#Project#apiAddress}/api/${#Project#version}/userRoles';
//ns1:Response[1]/ns1:results[1]/ns1:e[1]/ns1:user[1]/ns1:name[1]/text()</path>
            <content>${#Project#userName}</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:credentials>
          <con:authType>Global HTTP Settings</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:jmsPropertyConfig/>
        <con:parameters/>
      </con:restRequest>
    </con:config>
  </con:testStep>
  <con:testStep type="restrequest" name="CreatePermission">
    <con:settings/>
    <con:config service="REST API" resourcePath="/api/${#Project#version}/permissions" methodName="CreatePermission" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:restRequest name="CreatePermission" mediaType="application/json" postQueryString="false">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="x-api-key" value="${#Project#userApiKey}" xmlns="http://eviware.com/soapui/config"/></con:setting>
        </con:settings>
        <con:endpoint>http://${#Project#apiAddress}:5000</con:endpoint>
        <con:request>{
	"permission": "${#Project#newPermissionName}"
}</con:request>
        <con:assertion type="XPath Match" name="Check for existance of [id]">
          <con:configuration>
            <path>declare namespace ns1='http://${#Project#apiAddress}/api/${#Project#version}/permissions';
exists( //ns1:Response/ns1:id)</path>
            <content>true</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="XPath Match" name="Check for existance of [permission]">
          <con:configuration>
            <path>declare namespace ns1='http://${#Project#apiAddress}/api/${#Project#version}/permissions';
exists( //ns1:Response/ns1:permission)</path>
            <content>true</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="XPath Match" name="Match content of [permission]">
          <con:configuration>
            <path>declare namespace ns1='http://${#Project#apiAddress}/api/${#Project#version}/permissions';
//ns1:Response[1]/ns1:permission[1]/text()</path>
            <content>${#Project#newPermissionName}</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:credentials>
          <con:authType>Global HTTP Settings</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:jmsPropertyConfig/>
        <con:parameters/>
      </con:restRequest>
    </con:config>
  </con:testStep>
  <con:testStep type="transfer" name="SavePermissionId">
    <con:settings/>
    <con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
        <con:name>PermissionId</con:name>
        <con:sourceType>ResponseAsXml</con:sourceType>
        <con:sourceStep>CreatePermission</con:sourceStep>
        <con:sourcePath>declare namespace ns1='http://${#Project#apiAddress}/api/${#Project#version}/permissions';
//ns1:Response[1]/ns1:id[1]</con:sourcePath>
        <con:targetType>newPermissionId</con:targetType>
        <con:targetStep>#Project#</con:targetStep>
      </con:transfers>
    </con:config>
  </con:testStep>
  <con:testStep type="restrequest" name="GetPermission">
    <con:settings/>
    <con:config service="REST API" resourcePath="/api/${#Project#version}/permissions/${#Project#newPermissionId}" methodName="GetPermission" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:restRequest name="GetPermission" mediaType="application/json">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="x-api-key" value="${#Project#userApiKey}" xmlns="http://eviware.com/soapui/config"/></con:setting>
        </con:settings>
        <con:endpoint>http://${#Project#apiAddress}:5000</con:endpoint>
        <con:request/>
        <con:assertion type="XPath Match" name="Check for existance of [id]">
          <con:configuration>
            <path>declare namespace ns1='http://${#Project#apiAddress}/api/${#Project#version}/permissions/${#Project#newPermissionId}';
exists( //ns1:Response/ns1:id)</path>
            <content>true</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="XPath Match" name="Check for existance of [permission]">
          <con:configuration>
            <path>declare namespace ns1='http://${#Project#apiAddress}/api/${#Project#version}/permissions/${#Project#newPermissionId}';
exists( //ns1:Response/ns1:permission)</path>
            <content>true</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="XPath Match" name="Match content of [id]">
          <con:configuration>
            <path>declare namespace ns1='http://${#Project#apiAddress}/api/${#Project#version}/permissions/${#Project#newPermissionId}';
//ns1:Response[1]/ns1:id[1]/text()</path>
            <content>${#Project#newPermissionId}</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="XPath Match" name="Match content of [permission]">
          <con:configuration>
            <path>declare namespace ns1='http://${#Project#apiAddress}/api/${#Project#version}/permissions/${#Project#newPermissionId}';
//ns1:Response[1]/ns1:permission[1]/text()</path>
            <content>${#Project#newPermissionName}</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:credentials>
          <con:authType>Global HTTP Settings</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:jmsPropertyConfig/>
        <con:parameters/>
      </con:restRequest>
    </con:config>
  </con:testStep>
  <con:testStep type="restrequest" name="UpdatePermission">
    <con:settings/>
    <con:config service="REST API" resourcePath="/api/${#Project#version}/permissions/${#Project#newPermissionId}" methodName="UpdatePermission" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:restRequest name="UpdatePermission" mediaType="application/json" postQueryString="false">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="x-api-key" value="${#Project#userApiKey}" xmlns="http://eviware.com/soapui/config"/></con:setting>
        </con:settings>
        <con:endpoint>http://${#Project#apiAddress}:5000</con:endpoint>
        <con:request>{
	"id": "${#Project#newPermissionId}",
	"permission": "${#Project#newPermissionNameUpdate}"
}</con:request>
        <con:assertion type="XPath Match" name="Check for existance of [id]">
          <con:configuration>
            <path>declare namespace ns1='http://${#Project#apiAddress}/api/${#Project#version}/permissions/${#Project#newPermissionId}';
exists( //ns1:Response/ns1:id)</path>
            <content>true</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="XPath Match" name="Check for existance of [permission]">
          <con:configuration>
            <path>declare namespace ns1='http://${#Project#apiAddress}/api/${#Project#version}/permissions/${#Project#newPermissionId}';
exists( //ns1:Response/ns1:permission)</path>
            <content>true</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="XPath Match" name="Match content of [id]">
          <con:configuration>
            <path>declare namespace ns1='http://${#Project#apiAddress}/api/${#Project#version}/permissions/${#Project#newPermissionId}';
//ns1:Response[1]/ns1:id[1]/text()</path>
            <content>${#Project#newPermissionId}</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="XPath Match" name="Match content of [permission]">
          <con:configuration>
            <path>declare namespace ns1='http://${#Project#apiAddress}/api/${#Project#version}/permissions/${#Project#newPermissionId}';
//ns1:Response[1]/ns1:permission[1]/text()</path>
            <content>${#Project#newPermissionNameUpdate}</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:credentials>
          <con:authType>Global HTTP Settings</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:jmsPropertyConfig/>
        <con:parameters/>
      </con:restRequest>
    </con:config>
  </con:testStep>
  <con:testStep type="restrequest" name="CreateUser" id="496b678f-bb66-4ed9-a9c7-a261a6a9f2e4">
    <con:settings/>
    <con:config service="REST API" resourcePath="/api/${#Project#version}/users" methodName="CreateUser" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:restRequest name="CreateUser" mediaType="application/json" postQueryString="false">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="x-api-key" value="${#Project#userApiKey}" xmlns="http://eviware.com/soapui/config"/></con:setting>
          <con:setting id="com.eviware.soapui.support.editor.views.xml.form2.FormEditorView@ViewType">All</con:setting>
        </con:settings>
        <con:endpoint>http://${#Project#apiAddress}:5000</con:endpoint>
        <con:request>{
   "email": "testUser@openskye.org",
   "name": "Test User",
   "domain":    {
      "id": "${#Project#userDomain}",
      "name": "Skye"
   }
}</con:request>
        <con:assertion type="XPath Match" name="Check for existance of [domain]">
          <con:configuration>
            <path>declare namespace ns1='http://${#Project#apiAddress}/api/${#Project#version}/users';
exists( //ns1:Response/ns1:domain)</path>
            <content>true</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="XPath Match" name="Check for existance of [domain.id]">
          <con:configuration>
            <path>declare namespace ns1='http://${#Project#apiAddress}/api/${#Project#version}/users';
exists( //ns1:Response/ns1:domain/ns1:id)</path>
            <content>true</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="XPath Match" name="Check for existance of [domain.name]">
          <con:configuration>
            <path>declare namespace ns1='http://${#Project#apiAddress}/api/${#Project#version}/users';
exists( //ns1:Response/ns1:domain/ns1:name)</path>
            <content>true</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="XPath Match" name="Check for existance of [email]">
          <con:configuration>
            <path>declare namespace ns1='http://${#Project#apiAddress}/api/${#Project#version}/users';
exists( //ns1:Response/ns1:email)</path>
            <content>true</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="XPath Match" name="Check for existance of [id]">
          <con:configuration>
            <path>declare namespace ns1='http://${#Project#apiAddress}/api/${#Project#version}/users';
exists( //ns1:Response/ns1:id)</path>
            <content>true</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="XPath Match" name="Check for existance of [name]">
          <con:configuration>
            <path>declare namespace ns1='http://${#Project#apiAddress}/api/${#Project#version}/users';
exists( //ns1:Response/ns1:name)</path>
            <content>true</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:credentials>
          <con:authType>Global HTTP Settings</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:jmsPropertyConfig/>
        <con:parameters/>
      </con:restRequest>
    </con:config>
  </con:testStep>
  <con:testStep type="transfer" name="SaveNewUserInfo">
    <con:settings/>
    <con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
        <con:name>UserId</con:name>
        <con:sourceType>ResponseAsXml</con:sourceType>
        <con:sourceStep>CreateUser</con:sourceStep>
        <con:sourcePath>declare namespace ns1='http://${#Project#apiAddress}/api/${#Project#version}/users';
//ns1:Response[1]/ns1:id[1]</con:sourcePath>
        <con:targetType>newUserId</con:targetType>
        <con:targetStep>#Project#</con:targetStep>
      </con:transfers>
    </con:config>
  </con:testStep>
  <con:testStep type="restrequest" name="CreateUserRole">
    <con:settings/>
    <con:config service="REST API" resourcePath="/api/${#Project#version}/userRoles" methodName="CreateUserRole" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:restRequest name="CreateUserRole" mediaType="application/json" postQueryString="false">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="x-api-key" value="${#Project#userApiKey}" xmlns="http://eviware.com/soapui/config"/></con:setting>
        </con:settings>
        <con:endpoint>http://${#Project#apiAddress}:5000</con:endpoint>
        <con:request>{
      "user":       {
         "id": "${#Project#newUserId}",
         "email": "${#Project#newUserEmail}",
         "name": "${#Project#newUserName}",
         "domain":          {
            "id": "${#Project#userDomain}",
            "name": "${#Project#userDomainName}"
         }
      },
      "role":       {
         "id": "${#Project#newRoleId}",
         "name": "${#Project#newUserRoleName}"
      }
   }</con:request>
        <con:assertion type="XPath Match" name="Check for existance of [id]">
          <con:configuration>
            <path>declare namespace ns1='http://${#Project#apiAddress}/api/${#Project#version}/userRoles';
exists( //ns1:Response/ns1:id)</path>
            <content>true</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="XPath Match" name="Check for existance of [role]">
          <con:configuration>
            <path>declare namespace ns1='http://${#Project#apiAddress}/api/${#Project#version}/userRoles';
exists( //ns1:Response/ns1:role)</path>
            <content>true</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="XPath Match" name="Check for existance of [role.id]">
          <con:configuration>
            <path>declare namespace ns1='http://${#Project#apiAddress}/api/${#Project#version}/userRoles';
exists( //ns1:Response/ns1:role/ns1:id)</path>
            <content>true</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="XPath Match" name="Check for existance of [role.name]">
          <con:configuration>
            <path>declare namespace ns1='http://${#Project#apiAddress}/api/${#Project#version}/userRoles';
exists( //ns1:Response/ns1:role/ns1:name)</path>
            <content>true</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="XPath Match" name="Check for existance of [user]">
          <con:configuration>
            <path>declare namespace ns1='http://${#Project#apiAddress}/api/${#Project#version}/userRoles';
exists( //ns1:Response/ns1:user)</path>
            <content>true</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="XPath Match" name="Check for existance of [user.domain]">
          <con:configuration>
            <path>declare namespace ns1='http://${#Project#apiAddress}/api/${#Project#version}/userRoles';
exists( //ns1:Response/ns1:user/ns1:domain)</path>
            <content>true</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="XPath Match" name="Check for existance of [user.domain.id]">
          <con:configuration>
            <path>declare namespace ns1='http://${#Project#apiAddress}/api/${#Project#version}/userRoles';
exists( //ns1:Response/ns1:user/ns1:domain/ns1:id)</path>
            <content>true</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="XPath Match" name="Check for existance of [user.domain.name]">
          <con:configuration>
            <path>declare namespace ns1='http://${#Project#apiAddress}/api/${#Project#version}/userRoles';
exists( //ns1:Response/ns1:user/ns1:domain/ns1:name)</path>
            <content>true</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="XPath Match" name="Check for existance of [user.email]">
          <con:configuration>
            <path>declare namespace ns1='http://${#Project#apiAddress}/api/${#Project#version}/userRoles';
exists( //ns1:Response/ns1:user/ns1:email)</path>
            <content>true</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="XPath Match" name="Check for existance of [user.id]">
          <con:configuration>
            <path>declare namespace ns1='http://${#Project#apiAddress}/api/${#Project#version}/userRoles';
exists( //ns1:Response/ns1:user/ns1:id)</path>
            <content>true</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="XPath Match" name="Check for existance of [user.name]">
          <con:configuration>
            <path>declare namespace ns1='http://${#Project#apiAddress}/api/${#Project#version}/userRoles';
exists( //ns1:Response/ns1:user/ns1:name)</path>
            <content>true</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="XPath Match" name="Match content of [role.id]">
          <con:configuration>
            <path>declare namespace ns1='http://${#Project#apiAddress}/api/${#Project#version}/userRoles';
//ns1:Response[1]/ns1:role[1]/ns1:id[1]/text()</path>
            <content>${#Project#newRoleId}</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="XPath Match" name="Match content of [role.name]">
          <con:configuration>
            <path>declare namespace ns1='http://${#Project#apiAddress}/api/${#Project#version}/userRoles';
//ns1:Response[1]/ns1:role[1]/ns1:name[1]/text()</path>
            <content>${#Project#newUserRoleName}</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="XPath Match" name="Match content of [user.domain.id]">
          <con:configuration>
            <path>declare namespace ns1='http://${#Project#apiAddress}/api/${#Project#version}/userRoles';
//ns1:Response[1]/ns1:user[1]/ns1:domain[1]/ns1:id[1]/text()</path>
            <content>${#Project#userDomain}</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="XPath Match" name="Match content of [user.domain.name]">
          <con:configuration>
            <path>declare namespace ns1='http://${#Project#apiAddress}/api/${#Project#version}/userRoles';
//ns1:Response[1]/ns1:user[1]/ns1:domain[1]/ns1:name[1]/text()</path>
            <content>${#Project#userDomainName}</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="XPath Match" name="Match content of [user.email]">
          <con:configuration>
            <path>declare namespace ns1='http://${#Project#apiAddress}/api/${#Project#version}/userRoles';
//ns1:Response[1]/ns1:user[1]/ns1:email[1]/text()</path>
            <content>${#Project#newUserEmail}</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="XPath Match" name="Match content of [user.id]">
          <con:configuration>
            <path>declare namespace ns1='http://${#Project#apiAddress}/api/${#Project#version}/userRoles';
//ns1:Response[1]/ns1:user[1]/ns1:id[1]/text()</path>
            <content>${#Project#newUserId}</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="XPath Match" name="Match content of [user.name]">
          <con:configuration>
            <path>declare namespace ns1='http://${#Project#apiAddress}/api/${#Project#version}/userRoles';
//ns1:Response[1]/ns1:user[1]/ns1:name[1]/text()</path>
            <content>${#Project#newUserName}</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:credentials>
          <con:authType>Global HTTP Settings</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:jmsPropertyConfig/>
        <con:parameters/>
      </con:restRequest>
    </con:config>
  </con:testStep>
  <con:testStep type="transfer" name="SaveUserRoleId">
    <con:settings/>
    <con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
        <con:name>UserRoleId</con:name>
        <con:sourceType>ResponseAsXml</con:sourceType>
        <con:sourceStep>CreateUserRole</con:sourceStep>
        <con:sourcePath>declare namespace ns1='http://${#Project#apiAddress}/api/${#Project#version}/userRoles';
//ns1:Response[1]/ns1:id[1]</con:sourcePath>
        <con:targetType>newUserRoleId</con:targetType>
        <con:targetStep>#Project#</con:targetStep>
      </con:transfers>
    </con:config>
  </con:testStep>
  <con:testStep type="restrequest" name="DeleteUserRole">
    <con:settings/>
    <con:config service="REST API" resourcePath="/api/${#Project#version}/userRoles/${#Project#newUserRoleId}" methodName="DeleteUserRole" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:restRequest name="DeleteUserRole" mediaType="application/json">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="x-api-key" value="${#Project#userApiKey}" xmlns="http://eviware.com/soapui/config"/></con:setting>
        </con:settings>
        <con:endpoint>http://${#Project#apiAddress}:5000</con:endpoint>
        <con:request/>
        <con:credentials>
          <con:authType>Global HTTP Settings</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:jmsPropertyConfig/>
        <con:parameters/>
      </con:restRequest>
    </con:config>
  </con:testStep>
  <con:testStep type="restrequest" name="UpdateRole">
    <con:settings/>
    <con:config service="REST API" resourcePath="/api/${#Project#version}/roles/${#Project#newRoleId}" methodName="UpdateRole" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:restRequest name="UpdateRole" mediaType="application/json" postQueryString="false">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="x-api-key" value="${#Project#userApiKey}" xmlns="http://eviware.com/soapui/config"/></con:setting>
        </con:settings>
        <con:endpoint>http://${#Project#apiAddress}:5000</con:endpoint>
        <con:request>{
	"id": "${#Project#newRoleId}",
	"name": "${#Project#newUserRoleNameUpdate}"
}</con:request>
        <con:assertion type="XPath Match" name="Check for existance of [id]">
          <con:configuration>
            <path>declare namespace ns1='http://${#Project#apiAddress}/api/${#Project#version}/roles/${#Project#newRoleId}';
exists( //ns1:Response/ns1:id)</path>
            <content>true</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="XPath Match" name="Check for existance of [name]">
          <con:configuration>
            <path>declare namespace ns1='http://${#Project#apiAddress}/api/${#Project#version}/roles/${#Project#newRoleId}';
exists( //ns1:Response/ns1:name)</path>
            <content>true</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="XPath Match" name="Match content of [id]">
          <con:configuration>
            <path>declare namespace ns1='http://${#Project#apiAddress}/api/${#Project#version}/roles/${#Project#newRoleId}';
//ns1:Response[1]/ns1:id[1]/text()</path>
            <content>${#Project#newRoleId}</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="XPath Match" name="Match content of [name]">
          <con:configuration>
            <path>declare namespace ns1='http://${#Project#apiAddress}/api/${#Project#version}/roles/${#Project#newRoleId}';
//ns1:Response[1]/ns1:name[1]/text()</path>
            <content>${#Project#newUserRoleNameUpdate}</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:credentials>
          <con:authType>Global HTTP Settings</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:jmsPropertyConfig/>
        <con:parameters/>
      </con:restRequest>
    </con:config>
  </con:testStep>
  <con:testStep type="restrequest" name="UpdateNewUser">
    <con:settings/>
    <con:config service="REST API" resourcePath="/api/${#Project#version}/users/${#Project#newUserId}" methodName="UpdateUser" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:restRequest name="UpdateNewUser" mediaType="application/json" postQueryString="false">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="x-api-key" value="${#Project#userApiKey}" xmlns="http://eviware.com/soapui/config"/></con:setting>
        </con:settings>
        <con:endpoint>http://${#Project#apiAddress}:5000</con:endpoint>
        <con:request>{
         "id": "${#Project#newUserId}",
         "email": "${#Project#newUserEmailUpdate}",
         "name": "${#Project#newUserNameUpdate}",
         "domain":          {
            "id": "${#Project#userDomain}",
            "name": "${#Project#userDomainName}"
         }
	}</con:request>
        <con:assertion type="XPath Match" name="Check for existance of [domain]">
          <con:configuration>
            <path>declare namespace ns1='http://${#Project#apiAddress}/api/${#Project#version}/users/${#Project#newUserId}';
exists( //ns1:Response/ns1:domain)</path>
            <content>true</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="XPath Match" name="Check for existance of [domain.name]">
          <con:configuration>
            <path>declare namespace ns1='http://${#Project#apiAddress}/api/${#Project#version}/users/${#Project#newUserId}';
exists( //ns1:Response/ns1:domain/ns1:name)</path>
            <content>true</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="XPath Match" name="Check for existance of [domain.id]">
          <con:configuration>
            <path>declare namespace ns1='http://${#Project#apiAddress}/api/${#Project#version}/users/${#Project#newUserId}';
exists( //ns1:Response/ns1:domain/ns1:id)</path>
            <content>true</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="XPath Match" name="Check for existance of [email]">
          <con:configuration>
            <path>declare namespace ns1='http://${#Project#apiAddress}/api/${#Project#version}/users/${#Project#newUserId}';
exists( //ns1:Response/ns1:email)</path>
            <content>true</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="XPath Match" name="Check for existance of [id]">
          <con:configuration>
            <path>declare namespace ns1='http://${#Project#apiAddress}/api/${#Project#version}/users/${#Project#newUserId}';
exists( //ns1:Response/ns1:id)</path>
            <content>true</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="XPath Match" name="Check for existance of [name]">
          <con:configuration>
            <path>declare namespace ns1='http://${#Project#apiAddress}/api/${#Project#version}/users/${#Project#newUserId}';
exists( //ns1:Response/ns1:name)</path>
            <content>true</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="XPath Match" name="Match content of [domain.id]">
          <con:configuration>
            <path>declare namespace ns1='http://${#Project#apiAddress}/api/${#Project#version}/users/${#Project#newUserId}';
//ns1:Response[1]/ns1:domain[1]/ns1:id[1]/text()</path>
            <content>${#Project#userDomain}</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="XPath Match" name="Match content of [domain.name]">
          <con:configuration>
            <path>declare namespace ns1='http://${#Project#apiAddress}/api/${#Project#version}/users/${#Project#newUserId}';
//ns1:Response[1]/ns1:domain[1]/ns1:name[1]/text()</path>
            <content>${#Project#userDomainName}</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="XPath Match" name="Match content of [email]">
          <con:configuration>
            <path>declare namespace ns1='http://${#Project#apiAddress}/api/${#Project#version}/users/${#Project#newUserId}';
//ns1:Response[1]/ns1:email[1]/text()</path>
            <content>${#Project#newUserEmailUpdate}</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="XPath Match" name="Match content of [id]">
          <con:configuration>
            <path>declare namespace ns1='http://${#Project#apiAddress}/api/${#Project#version}/users/${#Project#newUserId}';
//ns1:Response[1]/ns1:id[1]/text()</path>
            <content>${#Project#newUserId}</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="XPath Match" name="Match content of [name]">
          <con:configuration>
            <path>declare namespace ns1='http://${#Project#apiAddress}/api/${#Project#version}/users/${#Project#newUserId}';
//ns1:Response[1]/ns1:name[1]/text()</path>
            <content>${#Project#newUserNameUpdate}</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:credentials>
          <con:authType>Global HTTP Settings</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:jmsPropertyConfig/>
        <con:parameters/>
      </con:restRequest>
    </con:config>
  </con:testStep>
  <con:testStep type="restrequest" name="CreateRolePermission">
    <con:settings/>
    <con:config service="REST API" resourcePath="/api/${#Project#version}/rolePermissions" methodName="CreateRolePermission" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:restRequest name="CreateRolePermission" mediaType="application/json" postQueryString="false">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="x-api-key" value="${#Project#userApiKey}" xmlns="http://eviware.com/soapui/config"/></con:setting>
        </con:settings>
        <con:endpoint>http://${#Project#apiAddress}:5000</con:endpoint>
        <con:request>{
      "role":       {
         "id": "${#Project#newRoleId}"
      },
      "permission":       {
         "id": "${#Project#newPermissionId}"
      }
}</con:request>
        <con:assertion type="XPath Match" name="Check for existance of [id]">
          <con:configuration>
            <path>declare namespace ns1='http://${#Project#apiAddress}/api/${#Project#version}/rolePermissions';
exists( //ns1:Response/ns1:id)</path>
            <content>true</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="XPath Match" name="Check for existance of [permission]">
          <con:configuration>
            <path>declare namespace ns1='http://${#Project#apiAddress}/api/${#Project#version}/rolePermissions';
exists( //ns1:Response/ns1:permission)</path>
            <content>true</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="XPath Match" name="Check for existance of [role]">
          <con:configuration>
            <path>declare namespace ns1='http://${#Project#apiAddress}/api/${#Project#version}/rolePermissions';
exists( //ns1:Response/ns1:role)</path>
            <content>true</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="XPath Match" name="Check for existance of [permission.id]">
          <con:configuration>
            <path>declare namespace ns1='http://${#Project#apiAddress}/api/${#Project#version}/rolePermissions';
exists( //ns1:Response/ns1:permission/ns1:id)</path>
            <content>true</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="XPath Match" name="Check for existance of [role.id]">
          <con:configuration>
            <path>declare namespace ns1='http://${#Project#apiAddress}/api/${#Project#version}/rolePermissions';
exists( //ns1:Response/ns1:role/ns1:id)</path>
            <content>true</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="XPath Match" name="Match content of [permission.id]">
          <con:configuration>
            <path>declare namespace ns1='http://${#Project#apiAddress}/api/${#Project#version}/rolePermissions';
//ns1:Response[1]/ns1:permission[1]/ns1:id[1]/text()</path>
            <content>${#Project#newPermissionId}</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="XPath Match" name="Match content of [role.id]">
          <con:configuration>
            <path>declare namespace ns1='http://${#Project#apiAddress}/api/${#Project#version}/rolePermissions';
//ns1:Response[1]/ns1:role[1]/ns1:id[1]/text()</path>
            <content>${#Project#newRoleId}</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:credentials>
          <con:authType>Global HTTP Settings</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:jmsPropertyConfig/>
        <con:parameters/>
      </con:restRequest>
    </con:config>
  </con:testStep>
  <con:testStep type="transfer" name="SaveRolePermissionId">
    <con:settings/>
    <con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
        <con:name>RolePermissionId</con:name>
        <con:sourceType>ResponseAsXml</con:sourceType>
        <con:sourceStep>CreateRolePermission</con:sourceStep>
        <con:sourcePath>declare namespace ns1='http://${#Project#apiAddress}/api/${#Project#version}/rolePermissions';
//ns1:Response[1]/ns1:id[1]</con:sourcePath>
        <con:targetType>newRolePermissionId</con:targetType>
        <con:targetStep>#Project#</con:targetStep>
      </con:transfers>
    </con:config>
  </con:testStep>
  <con:testStep type="restrequest" name="GetRolePermission">
    <con:settings/>
    <con:config service="REST API" resourcePath="/api/${#Project#version}/rolePermissions/${#Project#newRolePermissionId}" methodName="GetRolePermission" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:restRequest name="GetRolePermission" mediaType="application/json">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="x-api-key" value="${#Project#userApiKey}" xmlns="http://eviware.com/soapui/config"/></con:setting>
        </con:settings>
        <con:endpoint>http://${#Project#apiAddress}:5000</con:endpoint>
        <con:request/>
        <con:assertion type="XPath Match" name="Check for existance of [id]">
          <con:configuration>
            <path>declare namespace ns1='http://${#Project#apiAddress}/api/${#Project#version}/rolePermissions/${#Project#newRolePermissionId}';
exists( //ns1:Response/ns1:id)</path>
            <content>true</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="XPath Match" name="Check for existance of [permission]">
          <con:configuration>
            <path>declare namespace ns1='http://${#Project#apiAddress}/api/${#Project#version}/rolePermissions/${#Project#newRolePermissionId}';
exists( //ns1:Response/ns1:permission)</path>
            <content>true</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="XPath Match" name="Check for existance of [permission.id]">
          <con:configuration>
            <path>declare namespace ns1='http://${#Project#apiAddress}/api/${#Project#version}/rolePermissions/${#Project#newRolePermissionId}';
exists( //ns1:Response/ns1:permission/ns1:id)</path>
            <content>true</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="XPath Match" name="Check for existance of [permission.permission]">
          <con:configuration>
            <path>declare namespace ns1='http://${#Project#apiAddress}/api/${#Project#version}/rolePermissions/${#Project#newRolePermissionId}';
exists( //ns1:Response/ns1:permission/ns1:permission)</path>
            <content>true</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="XPath Match" name="Check for existance of [role]">
          <con:configuration>
            <path>declare namespace ns1='http://${#Project#apiAddress}/api/${#Project#version}/rolePermissions/${#Project#newRolePermissionId}';
exists( //ns1:Response/ns1:role)</path>
            <content>true</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="XPath Match" name="Check for existance of [role.id]">
          <con:configuration>
            <path>declare namespace ns1='http://${#Project#apiAddress}/api/${#Project#version}/rolePermissions/${#Project#newRolePermissionId}';
exists( //ns1:Response/ns1:role/ns1:id)</path>
            <content>true</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="XPath Match" name="Check for existance of [role.name]">
          <con:configuration>
            <path>declare namespace ns1='http://${#Project#apiAddress}/api/${#Project#version}/rolePermissions/${#Project#newRolePermissionId}';
exists( //ns1:Response/ns1:role/ns1:name)</path>
            <content>true</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="XPath Match" name="Match content of [id]">
          <con:configuration>
            <path>declare namespace ns1='http://${#Project#apiAddress}/api/${#Project#version}/rolePermissions/${#Project#newRolePermissionId}';
//ns1:Response[1]/ns1:id[1]/text()</path>
            <content>${#Project#newRolePermissionId}</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="XPath Match" name="Match content of [permission.id]">
          <con:configuration>
            <path>declare namespace ns1='http://${#Project#apiAddress}/api/${#Project#version}/rolePermissions/${#Project#newRolePermissionId}';
//ns1:Response[1]/ns1:permission[1]/ns1:id[1]/text()</path>
            <content>${#Project#newPermissionId}</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="XPath Match" name="Match content of [permission.permission]">
          <con:configuration>
            <path>declare namespace ns1='http://${#Project#apiAddress}/api/${#Project#version}/rolePermissions/${#Project#newRolePermissionId}';
//ns1:Response[1]/ns1:permission[1]/ns1:permission[1]/text()</path>
            <content>${#Project#newPermissionNameUpdate}</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="XPath Match" name="Match content of [role.id]">
          <con:configuration>
            <path>declare namespace ns1='http://${#Project#apiAddress}/api/${#Project#version}/rolePermissions/${#Project#newRolePermissionId}';
//ns1:Response[1]/ns1:role[1]/ns1:id[1]/text()</path>
            <content>${#Project#newRoleId}</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="XPath Match" name="Match content of [role.name]">
          <con:configuration>
            <path>declare namespace ns1='http://${#Project#apiAddress}/api/${#Project#version}/rolePermissions/${#Project#newRolePermissionId}';
//ns1:Response[1]/ns1:role[1]/ns1:name[1]/text()</path>
            <content>${#Project#newUserRoleNameUpdate}</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:credentials>
          <con:authType>Global HTTP Settings</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:jmsPropertyConfig/>
        <con:parameters/>
      </con:restRequest>
    </con:config>
  </con:testStep>
  <con:testStep type="restrequest" name="DeleteRolePermission">
    <con:settings/>
    <con:config service="REST API" resourcePath="/api/${#Project#version}/rolePermissions/${#Project#newRolePermissionId}" methodName="DeleteRolePermission" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:restRequest name="DeleteRolePermission" mediaType="application/json">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="x-api-key" value="${#Project#userApiKey}" xmlns="http://eviware.com/soapui/config"/></con:setting>
        </con:settings>
        <con:endpoint>http://${#Project#apiAddress}:5000</con:endpoint>
        <con:request/>
        <con:credentials>
          <con:authType>Global HTTP Settings</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:jmsPropertyConfig/>
        <con:parameters/>
      </con:restRequest>
    </con:config>
  </con:testStep>
  <con:testStep type="restrequest" name="DeletePermission">
    <con:settings/>
    <con:config service="REST API" resourcePath="/api/${#Project#version}/permissions/${#Project#newPermissionId}" methodName="DeletePermission" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:restRequest name="DeletePermission" mediaType="application/json">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="x-api-key" value="${#Project#userApiKey}" xmlns="http://eviware.com/soapui/config"/></con:setting>
        </con:settings>
        <con:endpoint>http://${#Project#apiAddress}:5000</con:endpoint>
        <con:request/>
        <con:credentials>
          <con:authType>Global HTTP Settings</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:jmsPropertyConfig/>
        <con:parameters/>
      </con:restRequest>
    </con:config>
  </con:testStep>
  <con:testStep type="restrequest" name="DeleteRole">
    <con:settings/>
    <con:config service="REST API" resourcePath="/api/${#Project#version}/roles/${#Project#newRoleId}" methodName="DeleteRole" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:restRequest name="DeleteRole" mediaType="application/json">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="x-api-key" value="${#Project#userApiKey}" xmlns="http://eviware.com/soapui/config"/></con:setting>
        </con:settings>
        <con:endpoint>http://${#Project#apiAddress}:5000</con:endpoint>
        <con:request/>
        <con:credentials>
          <con:authType>Global HTTP Settings</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:jmsPropertyConfig/>
        <con:parameters/>
      </con:restRequest>
    </con:config>
  </con:testStep>
  <con:testStep type="restrequest" name="DeleteNewUser">
    <con:settings/>
    <con:config service="REST API" resourcePath="/api/${#Project#version}/users/${#Project#newUserId}" methodName="DeleteUser" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:restRequest name="DeleteNewUser" mediaType="application/json">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="x-api-key" value="${#Project#userApiKey}" xmlns="http://eviware.com/soapui/config"/></con:setting>
        </con:settings>
        <con:endpoint>http://${#Project#apiAddress}:5000</con:endpoint>
        <con:request/>
        <con:credentials>
          <con:authType>Global HTTP Settings</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:jmsPropertyConfig/>
        <con:parameters/>
      </con:restRequest>
    </con:config>
  </con:testStep>
  <con:properties/>
  <con:reportParameters/>
  <con:breakPoints>
    <con:testStepId>21e6f437-1f8a-49f5-9316-c1605ce1ef83</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>496b678f-bb66-4ed9-a9c7-a261a6a9f2e4</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
</con:testCase>